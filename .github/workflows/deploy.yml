name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        echo "üîç SSH Key validation:"
        if [[ $(head -1 ~/.ssh/id_rsa) == "-----BEGIN"* ]]; then
          echo "‚úÖ SSH key starts with proper header"
        else
          echo "‚ùå SSH key missing proper header"
        fi
        ssh-keygen -l -f ~/.ssh/id_rsa && echo "‚úÖ SSH key is valid" || echo "‚ùå SSH key validation failed"

    - name: Test SSH connection
      run: |
        echo "üîê Testing SSH connection to ${{ secrets.PRODUCTION_HOST }}..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o BatchMode=yes ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "echo 'SSH connection successful'"

    - name: Create deployment directory
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          sudo mkdir -p /opt/mapit/current
          sudo mkdir -p /opt/mapit/current/storage/logs
          sudo mkdir -p /opt/mapit/current/storage/uploads
          sudo mkdir -p /opt/mapit/current/docker/production/ssl
          sudo chown -R deploy:deploy /opt/mapit
        "

    - name: Copy application files
      run: |
        rsync -avz --delete \
          -e 'ssh -o StrictHostKeyChecking=no' \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='.env' \
          --exclude='storage/logs' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/mapit/current/

    - name: Create production environment file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cat > /opt/mapit/current/.env << 'EOF'
        # Production Environment Configuration
        APP_ENV=production
        APP_DEBUG=false
        APP_NAME=\"MapIt - Travel Destination Mapping\"
        APP_URL=https://mapitedu.nl

        # Database Configuration
        DB_CONNECTION=mysql
        DB_HOST=mysql
        DB_PORT=3306
        DB_DATABASE=mapit_production
        DB_USERNAME=mapit_prod_user
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        # Session Configuration
        SESSION_DRIVER=redis
        SESSION_LIFETIME=1440

        # Mail Configuration
        MAIL_DRIVER=smtp
        MAIL_HOST=${{ secrets.MAIL_HOST || 'localhost' }}
        MAIL_PORT=${{ secrets.MAIL_PORT || '587' }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}
        MAIL_ENCRYPTION=tls

        # API Keys
        GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
        WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY || '' }}

        # Security
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

        # File Upload Settings
        MAX_UPLOAD_SIZE=10485760
        ALLOWED_IMAGE_TYPES=jpg,jpeg,png,webp

        # Cache Configuration
        CACHE_DRIVER=redis
        CACHE_PREFIX=mapit_prod_

        # Logging
        LOG_LEVEL=warning
        LOG_CHANNEL=daily

        # SSL Configuration
        SSL_ENABLED=true
        FORCE_HTTPS=true

        # Performance
        OPCACHE_ENABLED=true
        REDIS_CACHE_TTL=3600

        # Admin Settings
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL || 'admin@mapitedu.nl' }}

        # Redis Configuration
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        EOF
        "

    - name: Set permissions
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          sudo chown -R www-data:www-data /opt/mapit/current
          sudo chmod -R 755 /opt/mapit/current
          sudo chmod -R 775 /opt/mapit/current/storage
          sudo chmod -R 775 /opt/mapit/current/public
        "

    - name: Deploy with Docker Compose (HTTP first)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/mapit/current
          export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          echo 'üîç Stopping existing containers...'
          sudo -E docker compose -f docker-compose.production.yml down || true
          echo 'üöÄ Starting containers...'
          sudo -E docker compose -f docker-compose.production.yml up -d --build nginx php mysql redis
        "

    - name: Wait for HTTP services to start
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          echo '‚è≥ Waiting for HTTP services to start...'
          sleep 45
          echo 'üê≥ Container status:'
          sudo docker compose -f /opt/mapit/current/docker-compose.production.yml ps
        "

    - name: Test HTTP connectivity
      run: |
        echo "üåê Testing HTTP connectivity..."
        sleep 30
        if curl -f -s -m 10 http://${{ secrets.PRODUCTION_HOST }}/ > /dev/null; then
          echo "‚úÖ HTTP site is accessible"
        else
          echo "‚ùå HTTP site is not accessible - checking logs..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
            echo 'üîç Nginx logs:'
            sudo docker logs mapit_nginx_prod --tail 20
            echo 'üîç PHP logs:'
            sudo docker logs mapit_php_prod --tail 10
          "
        fi

    - name: Setup SSL certificates with enhanced logging
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/mapit/current
          
          echo 'üîç === SSL SETUP DIAGNOSTICS ==='
          echo 'üåê Server and domain configuration:'
          SERVER_IP=\$(curl -s ifconfig.me 2>/dev/null || echo 'Unknown')
          echo '   Server IP: '\$SERVER_IP
          
          echo 'üîç DNS resolution test:'
          DOMAIN_IP=\$(dig +short mapitedu.nl 2>/dev/null | tail -n1 || echo 'DNS_FAILED')
          echo '   Domain IP: '\$DOMAIN_IP
          if [ \"\$SERVER_IP\" = \"\$DOMAIN_IP\" ]; then
            echo '‚úÖ DNS correctly points to this server'
          else
            echo '‚ö†Ô∏è DNS mismatch - Server: '\$SERVER_IP', Domain: '\$DOMAIN_IP
          fi
          
          echo 'üîç HTTP connectivity test:'
          HTTP_RESPONSE=\$(curl -s -o /dev/null -w '%{http_code}' -m 10 -H 'Host: mapitedu.nl' http://localhost/ 2>/dev/null || echo 'CURL_FAILED')
          echo '   HTTP Response Code: '\$HTTP_RESPONSE
          
          if [ \"\$HTTP_RESPONSE\" = \"200\" ]; then
            echo '‚úÖ Domain is accessible via HTTP, proceeding with SSL setup'
            
            echo 'üîç === CERTIFICATE MANAGEMENT ==='
            echo 'üîç Checking existing certificates:'
            if sudo docker run --rm -v current_certbot_conf:/certs alpine test -f /certs/live/mapitedu.nl/fullchain.pem 2>/dev/null; then
              echo '‚úÖ SSL certificates already exist'
              CERT_EXISTS=true
              
              echo 'üîç Certificate info:'
              sudo docker run --rm -v current_certbot_conf:/certs alpine ls -la /certs/live/mapitedu.nl/ 2>/dev/null || echo 'Cannot list certificate files'
              CERT_EXPIRY=\$(sudo docker run --rm -v current_certbot_conf:/certs alpine openssl x509 -in /certs/live/mapitedu.nl/fullchain.pem -noout -enddate 2>/dev/null | cut -d= -f2 || echo 'Cannot read expiry')
              echo '   Certificate expires: '\$CERT_EXPIRY
            else
              echo 'üìã No existing certificates found, requesting new ones'
              CERT_EXISTS=false
            fi
            
            echo 'üîç Docker volumes:'
            sudo docker volume ls | grep certbot || echo 'No certbot volumes found'
            
            echo 'üîç Creating certbot directories:'
            sudo mkdir -p /var/lib/docker/volumes/mapit_prod_network_certbot_www/_data
            sudo mkdir -p /var/lib/docker/volumes/mapit_prod_network_certbot_conf/_data
            sudo chmod 755 /var/lib/docker/volumes/mapit_prod_network_certbot_www/_data
            sudo chmod 755 /var/lib/docker/volumes/mapit_prod_network_certbot_conf/_data
            echo '‚úÖ Certbot directories created'
            
            if [ \"\$CERT_EXISTS\" = \"false\" ]; then
              echo 'üîç === CERTIFICATE REQUEST ==='
              echo 'üìã Checking certbot service configuration:'
              if grep -A 15 'certbot:' docker-compose.production.yml; then
                echo '‚úÖ Certbot service found in docker-compose'
              else
                echo '‚ùå No certbot service found in docker-compose'
              fi
              
              echo 'üìã Requesting SSL certificates:'
              export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
              
              # Run certbot and capture both stdout and stderr
              echo 'üîç Running certbot command...'
              set +e  # Don't exit on error
              CERTBOT_OUTPUT=\$(sudo -E docker compose -f docker-compose.production.yml run --rm certbot 2>&1)
              CERTBOT_EXIT_CODE=\$?
              set -e  # Re-enable exit on error
              
              echo 'üìã Certbot execution results:'
              echo '   Exit code: '\$CERTBOT_EXIT_CODE
              echo '   Output:'
              echo \"\$CERTBOT_OUTPUT\" | head -50  # Limit output length
              
              if [ \$CERTBOT_EXIT_CODE -ne 0 ]; then
                echo '‚ùå Certbot failed'
                echo 'üîç Debugging information:'
                echo '   Checking nginx access logs for ACME challenges:'
                sudo docker logs mapit_nginx_prod 2>/dev/null | grep -i 'acme\|\.well-known' | tail -10 || echo 'No ACME-related logs found'
                echo '   Checking if .well-known is accessible:'
                curl -I http://localhost/.well-known/acme-challenge/test 2>/dev/null || echo 'Cannot access .well-known directory'
              else
                echo '‚úÖ Certbot completed successfully'
              fi
            fi
            
            echo 'üîç === POST-CERTBOT VERIFICATION ==='
            echo 'üîç Checking certificate files:'
            if sudo docker run --rm -v current_certbot_conf:/certs alpine test -f /certs/live/mapitedu.nl/fullchain.pem 2>/dev/null; then
              echo '‚úÖ Certificate files exist'
              
              echo 'üîç Certificate file details:'
              sudo docker run --rm -v current_certbot_conf:/certs alpine ls -la /certs/live/mapitedu.nl/ 2>/dev/null || echo 'Cannot list files'
              
              echo 'üîç Certificate validation:'
              CERT_SUBJECT=\$(sudo docker run --rm -v current_certbot_conf:/certs alpine openssl x509 -in /certs/live/mapitedu.nl/fullchain.pem -noout -subject 2>/dev/null || echo 'Cannot read subject')
              echo '   Subject: '\$CERT_SUBJECT
              
              echo 'üîç === NGINX HTTPS CONFIGURATION ==='
              echo 'üîç Checking HTTPS config file:'
              if [ -f docker/production/nginx/https.conf ]; then
                echo '‚úÖ HTTPS config file exists'
                echo 'üîç Config file preview:'
                head -10 docker/production/nginx/https.conf
              else
                echo '‚ùå HTTPS config file not found'
                echo 'üîç Available nginx configs:'
                ls -la docker/production/nginx/ || echo 'Cannot list nginx configs'
              fi              echo 'üîÑ Switching to HTTPS configuration:'
              echo 'üîç Stopping nginx container for config replacement...'
              export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
              sudo -E docker compose -f docker-compose.production.yml stop nginx
              echo '‚úÖ Nginx container stopped'
              sleep 5
              
              echo 'üîç Copying HTTPS configuration to container...'
              if sudo docker cp docker/production/nginx/https.conf mapit_nginx_prod:/etc/nginx/conf.d/default.conf; then
                echo '‚úÖ HTTPS config copied to container'
                
                echo 'üîç Starting nginx container with new config...'
                sudo -E docker compose -f docker-compose.production.yml start nginx
                echo '‚úÖ Nginx container restarted with HTTPS config'                
                echo 'üîç Waiting for nginx to start...'
                sleep 15
              else
                echo '‚ùå Failed to copy HTTPS config'
                echo 'üîÑ Starting nginx container with original config...'
                sudo -E docker compose -f docker-compose.production.yml start nginx
                echo '‚ö†Ô∏è Reverted to HTTP configuration due to HTTPS config copy failure'
                exit 1
              fi
              
              echo 'üîç Verifying config was copied:'
              sudo docker exec mapit_nginx_prod ls -la /etc/nginx/conf.d/ || echo 'Cannot list nginx config directory'
              echo 'üîç Config file content in container:'
              sudo docker exec mapit_nginx_prod head -5 /etc/nginx/conf.d/default.conf || echo 'Cannot read config file in container'
              
              echo 'üîç Testing nginx configuration:'
              NGINX_TEST_OUTPUT=\$(sudo docker exec mapit_nginx_prod nginx -t 2>&1)
              NGINX_TEST_EXIT_CODE=\$?
              echo '   Nginx test output: '\$NGINX_TEST_OUTPUT
              echo '   Nginx test exit code: '\$NGINX_TEST_EXIT_CODE              if [ \$NGINX_TEST_EXIT_CODE -eq 0 ]; then
                echo '‚úÖ Nginx configuration test passed'
                echo 'üîç Checking nginx container status:'
                sudo docker ps | grep mapit_nginx_prod || echo 'Cannot find nginx container'
                
                echo 'üîç Testing HTTPS connectivity:'
                sleep 10  # Give nginx time to stabilize
                for attempt in 1 2 3; do
                  echo \"   HTTPS test attempt \$attempt/3:\"
                  HTTPS_RESPONSE=\$(curl -s -o /dev/null -w '%{http_code}' -m 15 -k https://mapitedu.nl/ 2>&1 || echo 'HTTPS_FAILED')
                  echo \"   Response: \$HTTPS_RESPONSE\"
                  
                  if [ \"\$HTTPS_RESPONSE\" = \"200\" ]; then
                    echo 'üöÄ HTTPS is now active and working!'
                    echo 'üìç Your site is available at: https://mapitedu.nl'
                    break
                  elif [ \$attempt -eq 3 ]; then
                    echo '‚ùå HTTPS test failed after 3 attempts'
                    echo 'üîç Final debugging:'
                    echo '   Nginx error logs:'
                    sudo docker logs mapit_nginx_prod --tail 15 | grep -i error || echo 'No recent errors'
                    echo '   Nginx access logs:'
                    sudo docker logs mapit_nginx_prod --tail 10 | grep -v error || echo 'No recent access logs'
                  else
                    echo \"   Waiting before retry...\"
                    sleep 5
                  fi
                done              else
                echo '‚ùå HTTPS configuration test failed'
                echo 'üîÑ Reverting to HTTP configuration:'
                export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
                sudo -E docker compose -f docker-compose.production.yml stop nginx
                echo '‚úÖ Nginx container stopped for config revert'
                sleep 5
                sudo docker cp docker/production/nginx/http-only-fixed.conf mapit_nginx_prod:/etc/nginx/conf.d/default.conf
                sudo -E docker compose -f docker-compose.production.yml start nginx
                echo '‚úÖ Reverted to HTTP configuration'
              fi
            else
              echo '‚ùå SSL certificate files not found after certbot'
              echo 'üîç === CERTIFICATE TROUBLESHOOTING ==='
              echo '   Volume contents:'
              sudo docker run --rm -v current_certbot_conf:/certs alpine find /certs -type f 2>/dev/null | head -20 || echo 'Cannot access certbot volume'
              echo '   Certbot logs:'
              sudo docker run --rm -v current_certbot_conf:/certs alpine cat /certs/letsencrypt.log 2>/dev/null | tail -20 || echo 'No certbot logs found'
              echo '   Nginx access to .well-known:'
              curl -I http://localhost/.well-known/acme-challenge/test 2>/dev/null || echo '.well-known not accessible'
              echo '‚ö†Ô∏è Continuing with HTTP only'
            fi
          else
            echo '‚ö†Ô∏è === HTTP ACCESS FAILED ==='
            echo '   Response code: '\$HTTP_RESPONSE
            echo 'üîç Debugging HTTP access:'
            echo '   Testing localhost directly:'
            LOCAL_TEST=\$(curl -s -o /dev/null -w '%{http_code}' -m 5 http://localhost/ 2>/dev/null || echo 'LOCAL_FAILED')
            echo '   Localhost response: '\$LOCAL_TEST
            
            echo '   Testing with Host header:'
            HOST_TEST=\$(curl -s -o /dev/null -w '%{http_code}' -m 5 -H 'Host: mapitedu.nl' http://localhost/ 2>/dev/null || echo 'HOST_FAILED')
            echo '   Host header response: '\$HOST_TEST
            
            echo '   Container status:'
            sudo docker ps | grep nginx || echo 'Nginx container not running'
            
            echo '   Recent nginx logs:'
            sudo docker logs mapit_nginx_prod --tail 15 || echo 'Cannot get nginx logs'
            
            echo '‚ö†Ô∏è HTTP access issues prevent SSL setup'
            echo '   Continuing with HTTP configuration'
          fi
        "

    - name: Comprehensive Health Check
      run: |
        echo "üîç === COMPREHENSIVE HEALTH CHECK ==="
        sleep 30
        
        # Check container status on server
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          echo 'üê≥ Container status:'
          sudo docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          echo ''
          
          echo 'üîç Container resource usage:'
          sudo docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}' || echo 'Cannot get container stats'
          echo ''
          
          echo 'üìã Recent container logs:'
          echo '--- Nginx (last 10 lines) ---'
          sudo docker logs mapit_nginx_prod --tail 10 2>/dev/null || echo 'Cannot get nginx logs'
          echo '--- PHP (last 5 lines) ---'
          sudo docker logs mapit_php_prod --tail 5 2>/dev/null || echo 'Cannot get PHP logs'
          echo '--- MySQL (last 3 lines) ---'
          sudo docker logs mapit_mysql_prod --tail 3 2>/dev/null || echo 'Cannot get MySQL logs'
          echo ''
        "
        
        echo "üåê === CONNECTIVITY TESTS ==="
        for i in {1..5}; do
          echo "üîç Health check attempt $i/5"
          
          # Test HTTP
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 10 http://mapitedu.nl/ 2>/dev/null || echo "FAILED")
          echo "   HTTP (mapitedu.nl): $HTTP_STATUS"
          
          # Test direct IP
          IP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 10 http://${{ secrets.PRODUCTION_HOST }}/ 2>/dev/null || echo "FAILED")
          echo "   HTTP (direct IP): $IP_STATUS"
          
          # Test HTTPS
          HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 10 -k https://mapitedu.nl/ 2>/dev/null || echo "FAILED")
          echo "   HTTPS: $HTTPS_STATUS"
          
          # Test health endpoint if it exists
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 10 http://mapitedu.nl/health 2>/dev/null || echo "FAILED")
          echo "   Health endpoint: $HEALTH_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ] || [ "$IP_STATUS" = "200" ]; then
            echo "‚úÖ Basic connectivity working!"
            
            echo ""
            echo "üéâ === FINAL STATUS SUMMARY ==="
            echo "   HTTP Domain:  http://mapitedu.nl ‚Üí $HTTP_STATUS"
            echo "   HTTP Direct:  http://${{ secrets.PRODUCTION_HOST }} ‚Üí $IP_STATUS"
            echo "   HTTPS:        https://mapitedu.nl ‚Üí $HTTPS_STATUS"
            echo "   Health:       /health ‚Üí $HEALTH_STATUS"
            
            if [ "$HTTPS_STATUS" = "200" ]; then
              echo "üîí ‚úÖ SSL/HTTPS is working perfectly!"
              echo "üåü Recommended URL: https://mapitedu.nl"
            elif [ "$HTTP_STATUS" = "200" ]; then
              echo "üåê ‚úÖ HTTP is working (HTTPS setup may need troubleshooting)"
              echo "üåü Working URL: http://mapitedu.nl"
            fi
            
            exit 0
          fi
          
          if [ $i -lt 5 ]; then
            echo "   ‚è≥ Waiting 15 seconds before retry..."
            sleep 15
          fi
        done
        
        echo "‚ùå Health check failed after 5 attempts"
        echo "üîç === FINAL TROUBLESHOOTING ==="
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          echo 'Container status:'
          sudo docker ps
          echo ''
          echo 'Network issues:'
          netstat -tlnp | grep :80 || echo 'Port 80 not listening'
          netstat -tlnp | grep :443 || echo 'Port 443 not listening'
          echo ''
          echo 'Local connectivity:'
          curl -v http://localhost/ 2>&1 | head -15 || echo 'Local curl failed'
        "

    - name: Deployment Summary
      if: always()
      run: |
        echo "üìä === DEPLOYMENT SUMMARY ==="
        echo "=========================="
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment Status: COMPLETED SUCCESSFULLY"
          echo ""
          echo "üåê Access URLs:"
          echo "   Primary:   https://mapitedu.nl"
          echo "   HTTP:      http://mapitedu.nl"
          echo "   Direct IP: http://${{ secrets.PRODUCTION_HOST }}"
          echo ""
          
          echo "üîç Final connectivity verification:"
          HTTP_FINAL=$(curl -s -o /dev/null -w "%{http_code}" -m 5 http://mapitedu.nl 2>/dev/null || echo "FAILED")
          HTTPS_FINAL=$(curl -s -o /dev/null -w "%{http_code}" -m 5 -k https://mapitedu.nl 2>/dev/null || echo "FAILED")
          
          echo "   HTTP:  $HTTP_FINAL"
          echo "   HTTPS: $HTTPS_FINAL"
          
          if [ "$HTTPS_FINAL" = "200" ]; then
            echo ""
            echo "üéâ ‚úÖ FULL SUCCESS: HTTPS/SSL is working!"
            echo "üîí Your site is securely available at: https://mapitedu.nl"
            echo "üõ°Ô∏è SSL certificate is properly configured"
          elif [ "$HTTP_FINAL" = "200" ]; then
            echo ""
            echo "‚ö†Ô∏è ‚úÖ PARTIAL SUCCESS: HTTP is working, HTTPS needs troubleshooting"
            echo "üåê Your site is available at: http://mapitedu.nl"
            echo "üîß SSL setup logs above contain troubleshooting information"
          else
            echo ""
            echo "‚ùå CONNECTIVITY ISSUES: Manual verification required"
            echo "üîç Check the health check logs above for details"
          fi
          
        else
          echo "‚ùå Deployment Status: FAILED"
          echo ""
          echo "üîç Common troubleshooting steps:"
          echo "1. Check GitHub Actions logs above for specific errors"
          echo "2. Verify SSH access: ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }}"
          echo "3. Check containers: sudo docker ps"
          echo "4. Check logs: sudo docker logs <container_name>"
          echo "5. Check nginx config: sudo docker exec mapit_nginx_prod nginx -t"
        fi
        
        echo ""
        echo "üõ†Ô∏è Management commands:"
        echo "   SSH: ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }}"
        echo "   Logs: sudo docker logs mapit_nginx_prod"
        echo "   Status: sudo docker ps"
        echo "   Restart: cd /opt/mapit/current && sudo docker compose -f docker-compose.production.yml restart"
        echo ""
        echo "üìÖ Deployment completed: $(date)"
        echo "üè∑Ô∏è Git commit: ${{ github.sha }}"
        echo "üîó Repository: ${{ github.repository }}"
